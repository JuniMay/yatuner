from bitarray import bitarray
from typing import List

optimization_list = [
    'aggressive-loop-optimizations',
    'associative-math',
    #'auto-profile',
    'auto-inc-dec',
    'branch-probabilities',
    'branch-target-load-optimize',
    'branch-target-load-optimize2',
    'btr-bb-exclusive',
    'caller-saves',
    'combine-stack-adjustments',
    'conserve-stack',
    'compare-elim',
    'cprop-registers',
    'crossjumping',
    'cse-follow-jumps',
    'cse-skip-blocks',
    'cx-fortran-rules',
    'cx-limited-range',
    'data-sections',
    'dce',
    'delayed-branch',
    'delete-null-pointer-checks',
    'devirtualize',
    'devirtualize-speculatively',
    'devirtualize-at-ltrans',
    'dse',
    'early-inlining',
    'ipa-sra',
    'expensive-optimizations',
    'fat-lto-objects',
    'fast-math',
    'finite-math-only',
    'float-store',
    'forward-propagate',
    'function-sections',
    'gcse',
    'gcse-after-reload',
    'gcse-las',
    'gcse-lm',
    'graphite-identity',
    'gcse-sm',
    'hoist-adjacent-loads',
    'if-conversion',
    'if-conversion2',
    'indirect-inlining',
    'inline-functions',
    'inline-functions-called-once',
    'inline-small-functions',
    'ipa-cp',
    'ipa-cp-clone',
    'ipa-bit-cp',
    'ipa-vrp',
    'ipa-pta',
    'ipa-profile',
    'ipa-pure-const',
    'ipa-reference',
    'ipa-reference-addressable',
    'ipa-stack-alignment',
    'ipa-icf',
    'ira-hoist-pressure',
    'ira-loop-pressure',
    'no-ira-share-save-slots',
    'no-ira-share-spill-slots',
    'isolate-erroneous-paths-dereference',
    'isolate-erroneous-paths-attribute',
    'ivopts',
    'keep-inline-functions',
    'keep-static-functions',
    'keep-static-consts',
    'limit-function-alignment',
    'live-range-shrinkage',
    'loop-block',
    'loop-interchange',
    'loop-strip-mine',
    'loop-unroll-and-jam',
    'loop-nest-optimize',
    'loop-parallelize-all',
    'lra-remat',
    'lto',
    'lto-compression-level',
    'merge-all-constants',
    'merge-constants',
    'modulo-sched',
    'modulo-sched-allow-regmoves',
    'move-loop-invariants',
    'no-branch-count-reg',
    'no-defer-pop',
    'no-fp-int-builtin-inexact',
    'no-function-cse',
    'no-guess-branch-probability',
    'no-inline',
    'no-math-errno',
    'no-peephole',
    'no-peephole2',
    'no-printf-return-value',
    'no-sched-interblock',
    'no-sched-spec',
    'no-signed-zeros',
    'no-toplevel-reorder',
    'no-trapping-math',
    'no-zero-initialized-in-bss',
    'omit-frame-pointer',
    'optimize-sibling-calls',
    'partial-inlining',
    'peel-loops',
    'predictive-commoning',
    'prefetch-loop-arrays',
    'profile-correction',
    'profile-use',
    'profile-values',
    'profile-reorder-functions',
    'reciprocal-math',
    'ree',
    'rename-registers',
    'reorder-blocks',
    'reorder-blocks-and-partition',
    'reorder-functions',
    'rerun-cse-after-loop',
    'reschedule-modulo-scheduled-loops',
    'rounding-math',
    'save-optimization-record',
    'sched2-use-superblocks',
    'sched-pressure',
    'sched-spec-load',
    'sched-spec-load-dangerous',
    'sched-group-heuristic',
    'sched-critical-path-heuristic',
    'sched-spec-insn-heuristic',
    'sched-rank-heuristic',
    'sched-last-insn-heuristic',
    'sched-dep-count-heuristic',
    'schedule-fusion',
    'schedule-insns',
    'schedule-insns2',
    'section-anchors',
    'selective-scheduling',
    'selective-scheduling2',
    'sel-sched-pipelining',
    'sel-sched-pipelining-outer-loops',
    'semantic-interposition',
    'shrink-wrap',
    'shrink-wrap-separate',
    'signaling-nans',
    'single-precision-constant',
    'split-ivs-in-unroller',
    'split-loops',
    'split-paths',
    'split-wide-types',
    'ssa-backprop',
    'ssa-phiopt',
    'stdarg-opt',
    'store-merging',
    'strict-aliasing',
    'thread-jumps',
    'tracer',
    'tree-bit-ccp',
    'tree-builtin-call-dce',
    'tree-ccp',
    'tree-ch',
    'tree-coalesce-vars',
    'tree-copy-prop',
    'tree-dce',
    'tree-dominator-opts',
    'tree-dse',
    'tree-forwprop',
    'tree-fre',
    'code-hoisting',
    'tree-loop-if-convert',
    'tree-loop-im',
    'tree-phiprop',
    'tree-loop-distribution',
    'tree-loop-distribute-patterns',
    'tree-loop-ivcanon',
    'tree-loop-linear',
    'tree-loop-optimize',
    'tree-loop-vectorize',
    'tree-parallelize-loops=n',
    'tree-pre',
    'tree-partial-pre',
    'tree-pta',
    'tree-reassoc',
    'tree-scev-cprop',
    'tree-sink',
    'tree-slsr',
    'tree-sra',
    'tree-switch-conversion',
    'tree-tail-merge',
    'tree-ter',
    'tree-vectorize',
    'tree-vrp',
    'unconstrained-commons',
    'unit-at-a-time',
    'unroll-all-loops',
    'unroll-loops',
    'unsafe-math-optimizations',
    'unswitch-loops',
    'ipa-ra',
    'variable-expansion-in-unroller',
    'vect-cost-model',
    'vpt',
    'web',
    'whole-program',
    'wpa',
    'use-linker-plugin',
]


def gen_optimization_option_list(option_flag: bitarray) -> List[str]:
    res: List[str] = []
    for i in range(len(option_flag)):
        if option_flag[i] == 1:
            res.append(optimization_list[i])

    return res


if __name__ == '__main__':
    print(gen_optimization_option_list(bitarray('101010101111')))
